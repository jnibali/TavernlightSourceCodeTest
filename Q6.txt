	Sadly I was unable to complete question 6 of the technical trial. I do feel that I understand the technical aspects of what is being asked, but was unable to complete it in time. I understand that the question was asking to implement a shader into the OTC client to be used on the player character during certain actions.My goal was to use a fragment shader for the red outline of the character sprite, and items on in-game tiles for the doppelganger effect. Then toggle this effect onMovement when a variable on the player is enabled.This would give the visual appearance that the player is moving faster visually. My issue was due to the fact I was both unable to enable shaders within the OTC client and was not able to pull the sprite from the player character reliably in the TFS server.

	I found that the OTC client had the framework for initial shader support, but it was only supported for the minimap, and items in game. In order for the shaders to work for player characters/creatures I would have had to make adjustments to the shadermanager files found in the source code. The shadermanger would have to be adjusted to initially create shaders out of a fragment and vertex files. Then store them compiled for use later. After the right conditions are met, the now compiled shader would be applied to a character sprite, and reset back to a default shader when the effect has ended. This would have to be handheld through the OTC client, as from my research on this environment, server side shaders are not generally used. 

 	As for the doppelganger effect I would handle this on the server side, through the use of placeholder items. When a certain effect/status for the player is enabled (such as the ‘haste’ spell for instance) this effect would be set to true. When enabled the server would spawn an item on the last tile the player stepped on. This would be handled in the “on step out” function of the tile objects. They would spawn an item that has a duplicate sprite of the player with a modified alpha. The items then themselves would keep track of the amount of them upon initialization of a new one being spawned, using a FIFO queue system. This new item would then either adjust its alpha according to its number ( the 1st would be a full alpha, the second at 75% and so on) unless the item would be over the amount wanted on screen at one. If so the first item in the queue would be popped out, and deleted from the world. When the player movement is finished, all doppelganger items remaining on the world would also be deleted. 


	I am sorry that I was unable to complete this question. However, if I am given the opportunity, I would love to discuss how your team did implement this feature in the environment. So that I may better learn and further grow my skills as a developer.  

